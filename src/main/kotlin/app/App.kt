package org.example

import app.GoogleSheetsClient
import com.pengrad.telegrambot.TelegramBot
import com.pengrad.telegrambot.UpdatesListener
import com.pengrad.telegrambot.model.Message
import com.pengrad.telegrambot.model.request.KeyboardButton
import com.pengrad.telegrambot.model.request.ReplyKeyboardMarkup
import com.pengrad.telegrambot.request.SendMessage
import io.github.cdimascio.dotenv.dotenv
import org.example.app.ApplicationForm
import org.example.app.FormState
import org.example.app.Session
import java.time.ZoneId
import java.time.ZonedDateTime

fun main() {
    val env = dotenv { ignoreIfMissing = false }
    val botToken = env["TELEGRAM_BOT_TOKEN"]
    val spreadsheetsId = env["SPREADSHEET_ID"]
    val sheetName = env["SHEET_NAME"]
    val credsPath = env["GOOGLE_CREDENTIALS_JSON"]
    val adminHandle = env["ADMIN_HADLE"] ?: "@Emma_Shleyger"
    val adminPhone = env["ADMIN_PHONE"] ?: "+7-999-794-59-57"

    val sheets = GoogleSheetsClient (credsPath, spreadsheetsId)
    val bot = TelegramBot(botToken)

    val sessions = mutableMapOf<Long, Session>()

    val menu = ReplyKeyboardMarkup(
        arrayOf(KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")),
        arrayOf(KeyboardButton("–ü–æ–º–æ—â—å"))
    ).resizeKeyboard(true).oneTimeKeyboard(false)


fun startMessage(chatId: Long) {
    val text = """
        –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤.
        –ó–∞—è–≤–∫—É –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å 2 —Å–ø–æ—Å–æ–±–∞–º–∏:
        1) –ù–∞–∂–∞—Ç—å "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –∏ –ø—Ä–æ–π—Ç–∏ –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥.
        2) –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ —Ñ–æ—Ä–º–µ: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞; –†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞; –£—Å–ª—É–≥–∞; –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö.
        """.trimIndent()
    bot.execute(SendMessage(chatId, text).replyMarkup(menu))
}

    fun helpMessage(chatId: Long){
        val text = """
            –ü–æ–º–æ—â—å:
            /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
            /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: $adminHandle
            –¢–µ–ª–µ—Ñ–æ–Ω: $adminPhone
            """.trimIndent()
        bot.execute(SendMessage(chatId, text).replyMarkup(menu))
    }

    fun cancel (chatId: Long){
        val text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏!"
        sessions.remove(chatId)
        bot.execute(SendMessage(chatId, text).replyMarkup(menu))
    }

    fun parseOneLine (raw: String): ApplicationForm?{
        val parts = raw.split(";").map { it.trim() }
        if (parts.size !=4) return null
        val price = parts [3].replace(",",".").toBigDecimalOrNull() ?: return null
        return ApplicationForm(parts[0], parts[1], parts[2], price)
    }

    fun finalizeAndSave (chatId: Long, message: Message, form: ApplicationForm){
        val username = message.from()?.username() ?: ""
        val timestamp = ZonedDateTime.now(ZoneId.of("Europe/Moscow")).toString()
        val row = listOf(
            timestamp,
            form.name ?: "",
            form.district ?: "",
            form.service ?: "",
            form.price?.toPlainString() ?: "",
            username.ifBlank { "" },
            chatId.toString()
        )
        sheets.appendRow(sheetName, row)
        bot.execute(SendMessage(chatId, "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!\n–ò–º—è: ${form.name}\n–†–∞–π–æ–Ω: ${form.district}\n–£—Å–ª—É–≥–∞: ${form.service}\n–¶–µ–Ω–∞: ${form.price}").replyMarkup(menu))
        sessions.remove(chatId)
    }


    fun handleStep (chatId: Long, message: Message, text: String){
        val session = sessions.getOrPut(chatId) { Session() }
        when (session.state){
            FormState.IDLE -> {
                session.state = FormState.WAITING_NAME
                bot.execute(SendMessage(chatId, "–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞."))
            }
            FormState.WAITING_NAME -> {
                session.state = FormState.WAITING_DISTRICT
                bot.execute(SendMessage(chatId, "–®–∞–≥ 2. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏."))
            }

            FormState.WAITING_DISTRICT -> {
                session.state = FormState.WAITING_SERVICE
                bot.execute(SendMessage(chatId, "–®–∞–≥ 3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏."))
            }

            FormState.WAITING_SERVICE -> {
                session.state = FormState.WAITING_PRICE
                bot.execute(SendMessage(chatId, "–®–∞–≥ 4. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ —á–∏—Å–ª–æ–º."))
            }

            FormState.WAITING_PRICE -> {
                val price = text.replace(",", ".").toBigDecimalOrNull()
                if (price == null){
                bot.execute(SendMessage(chatId, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø—Ä–∏–º–µ—Ä–ñ 1500"))
            } else {
                session.form.price = price
                    finalizeAndSave(chatId,message,session.form)
                }
        }
    }
}
    bot.setUpdatesListener { updates ->
        for (u in updates) {
            val msg = u.message() ?: continue
            val chatId = msg.chat().id()
            val text = msg.text() ?: ""

            when {
                text.equals("/start", true) -> startMessage(chatId)
                text.equals("/help", true) || text.equals("–ü–æ–º–æ—â—å", true) -> helpMessage(chatId)
                text.equals("/cancel", true) -> cancel(chatId)
                text.equals("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", true) -> handleStep(chatId, msg, text)
                else -> {
                    val parsed = parseOneLine(text)
                    if (parsed != null) {
                        finalizeAndSave(chatId, msg, parsed)
                    } else {
                        val state = sessions[chatId]?.state ?: FormState.IDLE
                        if (state == FormState.IDLE) {
                            bot.execute(SendMessage(chatId, "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É: –ò–º—è; –†–∞–π–æ–Ω; –£—Å–ª—É–≥–∞; –¶–µ–Ω–∞\n–∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª").replyMarkup(menu))
                        } else {
                            handleStep(chatId, msg, text)
                        }
                    }
                }
            }
        }
        UpdatesListener.CONFIRMED_UPDATES_ALL
    }

    println("üöÄ Bot started")
}